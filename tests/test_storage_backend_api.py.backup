"""
Tests for storage backend API endpoints
"""

import pytest
import json
from unittest.mock import Mock, patch, MagicMock
import sys
import os

# Add the parent directory to the path so we can import the modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))


class TestStorageBackendAPI:
    """Test cases for storage backend API endpoints"""
    
    @pytest.fixture(autouse=True)
    def mock_auth(self):
        """Mock authentication for all tests"""
        # Mock the authentication decorator to always pass
        with patch('modules.core.auth.AuthManager.require_auth') as mock_auth:
            def mock_decorator(f):
                return f  # Return the function unchanged (no auth check)
            mock_auth.return_value = mock_decorator
            yield
    
    @pytest.fixture
    def client(self, app):
        """Create test client"""
        return app.test_client()
    
    @pytest.fixture
    def auth_headers(self):
        """Create authorization headers for API requests"""
        return {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json'
        }
    
    def test_storage_backend_info_success(self, client, auth_headers):
        """Test getting storage backend information"""
        with patch('app.certmate_app') as mock_app:
            # Mock storage manager
            mock_storage_manager = Mock()
            mock_storage_manager.get_backend_name.return_value = 'local_filesystem'
            
            mock_app.managers = {
                'storage': mock_storage_manager,
                'settings': Mock()
            }
            
            # Mock settings
            mock_app.managers['settings'].load_settings.return_value = {
                'certificate_storage': {
                    'backend': 'local_filesystem',
                    'cert_dir': 'certificates'
                }
            }
            
            response = client.get('/api/storage/info', headers=auth_headers)
            
            assert response.status_code == 200
            data = json.loads(response.data)
            
            assert data['backend_name'] == 'local_filesystem'
            assert 'configuration' in data
    
    def test_storage_backend_info_no_storage_manager(self, client, auth_headers):
        """Test storage backend info when storage manager is not available"""
        with patch('app.certmate_app') as mock_app:
            mock_app.managers = {}
            
            response = client.get('/api/storage/info', headers=auth_headers)
            
            assert response.status_code == 500
            data = json.loads(response.data)
            assert 'error' in data
    
    def test_storage_backend_config_update(self, client, auth_headers):
        """Test updating storage backend configuration"""
        config_data = {
            'backend': 'azure_keyvault',
            'azure_keyvault': {
                'vault_url': 'https://test.vault.azure.net/',
                'tenant_id': 'test-tenant',
                'client_id': 'test-client',
                'client_secret': 'test-secret'
            }
        }
        
        with patch('app.certmate_app') as mock_app:
            mock_settings_manager = Mock()
            mock_settings_manager.load_settings.return_value = {}
            mock_app.managers = {'settings': mock_settings_manager}
            
            response = client.post(
                '/api/storage/config',
                headers=auth_headers,
                data=json.dumps(config_data)
            )
            
            assert response.status_code == 200
            data = json.loads(response.data)
            assert data['success'] is True
            
            # Verify settings were saved
            mock_settings_manager.save_settings.assert_called_once()
    
    def test_storage_backend_test_connection_success(self, client, auth_headers):
        """Test storage backend connection testing - success"""
        test_data = {
            'backend': 'local_filesystem',
            'config': {
                'cert_dir': 'test_certificates'
            }
        }
        
        with patch('modules.core.storage_backends.LocalFileSystemBackend') as mock_backend_class:
            mock_backend = Mock()
            mock_backend.get_backend_name.return_value = 'local_filesystem'
            mock_backend_class.return_value = mock_backend
            
            response = client.post(
                '/api/storage/test',
                headers=auth_headers,
                data=json.dumps(test_data)
            )
            
            assert response.status_code == 200
            data = json.loads(response.data)
            assert data['success'] is True
            assert data['backend'] == 'local_filesystem'
    
    def test_storage_backend_test_connection_failure(self, client, auth_headers):
        """Test storage backend connection testing - failure"""
        test_data = {
            'backend': 'azure_keyvault',
            'config': {
                'vault_url': 'invalid-url'
            }
        }
        
        with patch('modules.core.storage_backends.AzureKeyVaultBackend') as mock_backend_class:
            mock_backend_class.side_effect = ValueError("Invalid configuration")
            
            response = client.post(
                '/api/storage/test',
                headers=auth_headers,
                data=json.dumps(test_data)
            )
            
            assert response.status_code == 400
            data = json.loads(response.data)
            assert data['success'] is False
            assert 'error' in data
    
    def test_storage_backend_migration_success(self, client, auth_headers):
        """Test storage backend migration - success"""
        migration_data = {
            'source_backend': 'local_filesystem',
            'target_config': {
                'backend': 'azure_keyvault',
                'azure_keyvault': {
                    'vault_url': 'https://test.vault.azure.net/',
                    'tenant_id': 'test-tenant',
                    'client_id': 'test-client',
                    'client_secret': 'test-secret'
                }
            }
        }
        
        with patch('app.certmate_app') as mock_app:
            mock_storage_manager = Mock()
            mock_storage_manager.get_backend.return_value = Mock()
            
            # Mock successful migration
            mock_storage_manager.migrate_certificates.return_value = {
                'example.com': True,
                'test.org': True
            }
            
            mock_app.managers = {'storage': mock_storage_manager}
            
            with patch('modules.core.storage_backends.AzureKeyVaultBackend'):
                response = client.post(
                    '/api/storage/migrate',
                    headers=auth_headers,
                    data=json.dumps(migration_data)
                )
                
                assert response.status_code == 200
                data = json.loads(response.data)
                assert data['success'] is True
                assert data['migrated_count'] == 2
                assert 'results' in data
    
    def test_storage_backend_migration_failure(self, client, auth_headers):
        """Test storage backend migration - failure"""
        migration_data = {
            'source_backend': 'local_filesystem',
            'target_config': {
                'backend': 'invalid_backend'
            }
        }
        
        with patch('app.certmate_app') as mock_app:
            mock_storage_manager = Mock()
            mock_app.managers = {'storage': mock_storage_manager}
            
            response = client.post(
                '/api/storage/migrate',
                headers=auth_headers,
                data=json.dumps(migration_data)
            )
            
            assert response.status_code == 400
            data = json.loads(response.data)
            assert data['success'] is False
            assert 'error' in data
    
    def test_storage_backend_unauthorized_access(self, client):
        """Test storage backend endpoints without authentication"""
        endpoints = [
            '/api/storage/info',
            '/api/storage/config',
            '/api/storage/test',
            '/api/storage/migrate'
        ]
        
        for endpoint in endpoints:
            response = client.get(endpoint)
            assert response.status_code == 401  # Unauthorized
    
    def test_storage_backend_invalid_json(self, client, auth_headers):
        """Test storage backend endpoints with invalid JSON"""
        response = client.post(
            '/api/storage/config',
            headers=auth_headers,
            data='invalid json'
        )
        
        assert response.status_code == 400


class TestStorageBackendIntegrationWithCertificateManager:
    """Integration tests for storage backends with certificate manager"""
    
    @pytest.fixture
    def client(self, app):
        """Create test client"""
        return app.test_client()
    
    @pytest.fixture
    def auth_headers(self):
        """Create authorization headers for API requests"""
        return {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json'
        }
    
    def test_certificate_creation_with_storage_backend(self, client, auth_headers):
        """Test certificate creation uses storage backend"""
        cert_data = {
            'domain': 'test-storage.com',
            'email': 'test@example.com',
            'dns_provider': 'cloudflare'
        }
        
        with patch('app.certmate_app') as mock_app:
            # Mock certificate manager
            mock_cert_manager = Mock()
            mock_cert_manager.create_certificate.return_value = {
                'success': True,
                'message': 'Certificate created successfully'
            }
            
            # Mock storage manager
            mock_storage_manager = Mock()
            mock_storage_manager.get_backend_name.return_value = 'azure_keyvault'
            
            mock_app.managers = {
                'certificates': mock_cert_manager,
                'storage': mock_storage_manager
            }
            
            response = client.post(
                '/api/certificates/create',
                headers=auth_headers,
                data=json.dumps(cert_data)
            )
            
            # Verify certificate creation was called
            mock_cert_manager.create_certificate.assert_called_once()
    
    def test_certificate_info_with_storage_backend(self, client, auth_headers):
        """Test certificate info retrieval uses storage backend"""
        domain = 'test-storage.com'
        
        with patch('app.certmate_app') as mock_app:
            # Mock certificate manager
            mock_cert_manager = Mock()
            mock_cert_manager.get_certificate_info.return_value = {
                'domain': domain,
                'exists': True,
                'backend': 'azure_keyvault'
            }
            
            mock_app.managers = {'certificates': mock_cert_manager}
            
            response = client.get(
                f'/api/certificates/{domain}/info',
                headers=auth_headers
            )
            
            assert response.status_code == 200
            data = json.loads(response.data)
            assert data['domain'] == domain
            assert data['exists'] is True
    
    def test_certificate_list_with_storage_backend(self, client, auth_headers):
        """Test certificate listing uses storage backend"""
        with patch('app.certmate_app') as mock_app:
            # Mock storage manager
            mock_storage_manager = Mock()
            mock_storage_manager.list_certificates.return_value = [
                'example.com',
                'test.org',
                'another.net'
            ]
            
            mock_app.managers = {'storage': mock_storage_manager}
            
            response = client.get('/api/certificates', headers=auth_headers)
            
            assert response.status_code == 200
            data = json.loads(response.data)
            assert 'certificates' in data
            assert len(data['certificates']) == 3


class TestStorageBackendErrorHandling:
    """Test error handling in storage backend operations"""
    
    @pytest.fixture
    def client(self, app):
        """Create test client"""
        return app.test_client()
    
    @pytest.fixture
    def auth_headers(self):
        """Create authorization headers for API requests"""
        return {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json'
        }
    
    def test_storage_backend_connection_timeout(self, client, auth_headers):
        """Test handling of connection timeouts"""
        test_data = {
            'backend': 'azure_keyvault',
            'config': {
                'vault_url': 'https://unreachable.vault.azure.net/',
                'tenant_id': 'test-tenant',
                'client_id': 'test-client',
                'client_secret': 'test-secret'
            }
        }
        
        with patch('modules.core.storage_backends.AzureKeyVaultBackend') as mock_backend_class:
            mock_backend_class.side_effect = ConnectionError("Connection timeout")
            
            response = client.post(
                '/api/storage/test',
                headers=auth_headers,
                data=json.dumps(test_data)
            )
            
            assert response.status_code == 400
            data = json.loads(response.data)
            assert data['success'] is False
            assert 'connection' in data['error'].lower()
    
    def test_storage_backend_authentication_failure(self, client, auth_headers):
        """Test handling of authentication failures"""
        test_data = {
            'backend': 'aws_secrets_manager',
            'config': {
                'region': 'us-east-1',
                'access_key_id': 'invalid-key',
                'secret_access_key': 'invalid-secret'
            }
        }
        
        with patch('modules.core.storage_backends.AWSSecretsManagerBackend') as mock_backend_class:
            mock_backend = Mock()
            mock_backend_class.return_value = mock_backend
            
            # Simulate authentication error when testing connection
            mock_backend.get_backend_name.side_effect = Exception("Authentication failed")
            
            response = client.post(
                '/api/storage/test',
                headers=auth_headers,
                data=json.dumps(test_data)
            )
            
            assert response.status_code == 400
            data = json.loads(response.data)
            assert data['success'] is False
    
    def test_storage_backend_missing_dependencies(self, client, auth_headers):
        """Test handling of missing package dependencies"""
        test_data = {
            'backend': 'azure_keyvault',
            'config': {
                'vault_url': 'https://test.vault.azure.net/',
                'tenant_id': 'test-tenant',
                'client_id': 'test-client',
                'client_secret': 'test-secret'
            }
        }
        
        with patch('modules.core.storage_backends.AzureKeyVaultBackend') as mock_backend_class:
            mock_backend_class.side_effect = ImportError("azure-keyvault-secrets package required")
            
            response = client.post(
                '/api/storage/test',
                headers=auth_headers,
                data=json.dumps(test_data)
            )
            
            assert response.status_code == 400
            data = json.loads(response.data)
            assert data['success'] is False
            assert 'package' in data['error'].lower() or 'import' in data['error'].lower()
